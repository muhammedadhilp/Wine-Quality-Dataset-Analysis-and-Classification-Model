# -*- coding: utf-8 -*-
"""wine_quality_prediction.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1lObHxsAzQhF7D3ntLqWHRLCjn0A8NQxi
"""

import numpy as np
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score, confusion_matrix

df = pd.read_csv('/content/WineQT.csv')
df.head(100)

df.shape
# Dataset has 1143 rows and 13 columns

df.info()
# we dont have any categorical columns

df.describe()
# Columns and Descriptions:
# 1.Fixed Acidity: Refers to the non-volatile acids (such as tartaric acid) that remain in the wine during fermentation.
# Mean: 8.31 g/L, with a standard deviation of 1.75, indicating some variability.
# Min/Max: Ranges from 4.6 g/L to 15.9 g/L, showing a wide range of acid levels.

# 2.Volatile Acidity: Represents acetic acid content, which can give wine an undesirable vinegar flavor.
# Mean: 0.53 g/L.
# Min/Max: Values range from 0.12 g/L to 1.58 g/L, suggesting wines with both low and relatively high volatile acidity.

# 3.Citric Acid: Provides freshness to wines and can contribute to flavor.
# Mean: 0.27 g/L.
# Min/Max: Ranges from 0 to 1 g/L, meaning some wines may not contain citric acid.

# 4.Residual Sugar: The amount of sugar remaining after fermentation.
# Mean: 2.53 g/L, with a maximum of 15.5 g/L (indicating some sweeter wines).
# Min: 0.9 g/L, with a small amount of sugar even in the driest wines.

# 5.Chlorides: The amount of salt in the wine.
# Mean: 0.087 g/L.
# Max: 0.611 g/L, indicating that most wines have low salt content.

# 6.Free Sulfur Dioxide: SO₂ protects wine from oxidation and microbial growth.
# Mean: 15.62 ppm.
# Max: 68 ppm, with high variability as shown by a standard deviation of 10.25.

# 7.Total Sulfur Dioxide: Sum of free and bound SO₂.
# Mean: 45.91 ppm, with a wide range from 6 to 289 ppm.
# Std: 32.78, showing a broad range in sulfur dioxide levels.

# 8.Density: The density of the wine, which is closely related to alcohol and sugar content.
# Mean: 0.99673 g/cm³.
# Min/Max: From 0.99007 to 1.00369 g/cm³, indicating variation, with values generally close to 1.

# 9.pH: Measures the acidity or alkalinity of wine.
# Mean: 3.31, with a slight spread (std of 0.16), indicating most wines have a near-neutral pH.
# Range: 2.74 to 4.01, indicating a broad pH range.

# 10.Sulphates: A wine preservative and antioxidant.
# Mean: 0.66 g/L.
# Max: 2.0 g/L, with some wines having relatively high sulfate levels.

# 11.Alcohol: Alcohol content of the wine.
# Mean: 10.44%.
# Min/Max: Alcohol ranges from 8.4% to 14.9%, indicating both light and strong wines.

# 12.Quality: Wine quality score, likely on a scale from 0 to 10.
# Mean: 5.66 (average rating), with a standard deviation of 0.81, showing most ratings cluster around 5 to 6.
# Range: From 3 to 8, indicating that the wines are generally rated between average and good.

# 13.Id: An identifier for each wine sample.
# Range: From 0 to 1597.

df.isna().sum()
# no missing values found in the dataframe.

df['quality'].unique()
# quality distribution needs mapping so maping from 1 to 6
map_dict = {3:1,4:2,5:3,6:4,7:5,8:6}
df['quality'] = df['quality'].map(map_dict)

# Adding new columns based on the quality of the wine
df['goodquality'] = [1 if x>= 3 else 0 for x in df['quality']]  #Based on quality parameter now im adding a new column good quality if >= 6 its a good qulity wine and less than that it is 0 bad quality
df.head(10)

# Renaming lenghty columns
df.rename(columns ={'free sulfur dioxide':'free SO2','total sulfur dioxide':'total SO2'},inplace = True) #here the chemical compound formula of sulfur dioxide is SO2 so replaced with inplace to make it permanent
# Dropping id cause its not relevant
df = df.drop(['Id'],axis = 1)
df

# Correlation heatmap
plt.figure(figsize=(10, 8))
sns.heatmap(df.corr(), annot=True, cmap='coolwarm', vmin=-1, vmax=1)
plt.title('Correlation Between Features')
plt.show()
# features with good correlations are alcohol,sulphates,citric acid and fixed acidity

# Visualisations
# Count plot of wine quality
plt.figure(figsize=(8, 5))
sns.countplot(data=df,x = 'quality')
plt.title("Count plot of wine quality")
plt.show()
# most of the wines lay in the range of average with a decline leading to high quality wine ,the distribution follows a bell curve with peak in the middle.

# Box plot of alcohol content by wine quality
plt.figure(figsize=(10, 6))
sns.boxplot(x='quality', y='alcohol', data=df)
plt.title('Alcohol Content by Wine Quality')
plt.show()
# I can see outliers in 3 ,4 quality wines where alcohol levels are exceptionaly high which may indicate wines with high alcohol percentages ,not neccesarily errors
# repeating boxplots for other relavent columns.

# Box plot of sulphates content by wine quality
plt.figure(figsize=(10, 6))
sns.boxplot(x='quality', y='sulphates', data=df)
plt.title('Sulphates Content by Wine Quality')
plt.show()
# sulpahtes has also outliers from quality 2 to 6 while 3 contains most outliers

# Box plot of citric acid content by wine quality
plt.figure(figsize=(10, 6))
sns.boxplot(x='quality', y='citric acid', data=df)
plt.title('citric acid Content by Wine Quality')
plt.show()

# Box plot of fixed acidity content by wine quality
plt.figure(figsize=(10, 6))
sns.boxplot(x='quality', y='fixed acidity', data=df)
plt.title('fixed acidity Content by Wine Quality')
plt.show()

# Scatter plot to show relationship between alcohol and quality
plt.figure(figsize=(10, 6))
sns.scatterplot(x='alcohol', y='quality', data=df, hue='quality', palette='coolwarm', s=100)
plt.title('Relationship Between Alcohol Content and Quality')
plt.show()
# Observations:
# Higher Alcohol Content:

# Wines with higher quality ratings (5 and 6) tend to have higher alcohol content, typically ranging from around 11% to 14%.
# Quality 6 wines, represented by the darkest red color, seem to cluster more in the 12–14% alcohol range.
# Lower Alcohol Content:

# Wines with lower quality ratings (1 and 2) are concentrated in the lower alcohol ranges, around 9–10%. This suggests a possible correlation between lower alcohol content and lower wine quality.
# Mid-Range Quality (3 and 4):

# These qualities are more spread out across different alcohol contents, but generally, as alcohol content increases, the quality also tends to rise.
# No Clear Trend for Low Alcohol:

# Wines with alcohol content below 10% seem to cluster mostly in lower quality categories, but some variability still exists, as seen with some outliers in higher-quality wines.

sns.regplot(x='alcohol', y='quality', data=df)
plt.title('Regression Plot of alcohol vs Wine Quality')
plt.show()
# a positive slope indicating a positive also there is uncertainity as the spread of the points are wide

# Scatter plot to show relationship between sulphates and quality
plt.figure(figsize=(10, 6))
sns.scatterplot(x='sulphates', y='quality', data=df, hue='quality', palette='coolwarm', s=100)
plt.title('Relationship Between sulphates Content and Quality')
plt.show()
# Observations:
# Quality 1-2 Wines:

# Wines with lower quality (1 and 2) tend to have sulphate levels concentrated below 1.0. There are no significant outliers or high-sulphate content in these categories.
# Quality 3-5 Wines:

# These categories show a wide range of sulphate content, from around 0.4 to 1.75. However, the concentration of wines is still centered below 1.0 for most of the data.
# As the quality increases from 3 to 5, there seems to be a slight increase in sulphate content, but it’s not dramatic.
# Quality 6 Wines:

# The highest quality wines (quality 6) show a broader distribution of sulphates content, spanning from 0.5 to 2.0. This suggests that higher sulphate levels may correlate with higher quality wines, although it’s not definitive.
# General Insight:
# Low sulphates content (below 1.0): Most wines with lower sulphate content tend to fall into the lower-to-moderate quality range (1-4).
# Higher sulphates content (above 1.0): There seems to be a relationship between wines with higher sulphates content (closer to or above 1.0) and higher quality, particularly for quality 5 and 6 wines.

sns.regplot(x='sulphates', y='quality', data=df)
plt.title('Regression Plot of sulphates vs Wine Quality')
plt.show()

# Scatter plot to show relationship between citric acid and quality
plt.figure(figsize=(10, 6))
sns.scatterplot(x='citric acid', y='quality', data=df, hue='quality', palette='coolwarm', s=100)
plt.title('Relationship Between citric acid Content and Quality')
plt.show()

sns.regplot(x='citric acid', y='quality', data=df)
plt.title('Regression Plot of citric acid vs Wine Quality')
plt.show()

# Scatter plot to show relationship between volatile acidity and quality
plt.figure(figsize=(10, 6))
sns.scatterplot(x='volatile acidity', y='quality', data=df, hue='quality', palette='coolwarm', s=100)
plt.title('Relationship Between volatile acidity Content and Quality')
plt.show()
# Observations:
# Lower volatile acidity content:
# wines with high ratings tends to have lower volatile acidity contentin the range 0.2 to 0.6
# negative correlation is noticed

sns.regplot(x='volatile acidity', y='quality', data=df)
plt.title('Regression Plot of volatile acidity vs Wine Quality')
plt.show()

X = df.drop(columns=['quality'])
y = df['quality']

X_train,X_test,Y_train,Y_test = train_test_split(X,y,test_size=0.30,random_state=42)

# Initialize the model
model = RandomForestClassifier(n_estimators=100, random_state=42)

# Fit the model with training data
model.fit(X_train, Y_train)

# Predict on the test data
y_pred = model.predict(X_test)
# Calculate accuracy
accuracy = accuracy_score(Y_test, y_pred)
print(f'Accuracy: {accuracy * 100:.2f}%')

# Print the classification report for precision, recall, f1-score
print("Classification Report:\n", classification_report(Y_test, y_pred))

# Plot confusion matrix
labels=['Iris-setosa','Iris-versicolor','Iris-virginica']
conf_matrix = confusion_matrix(Y_test, y_pred)
sns.heatmap(conf_matrix, annot=True, fmt='d', cmap='Blues')
plt.xlabel("Predicted")
plt.ylabel("Actual")
plt.title("Confusion Matrix")
plt.show()
Accuracy: 68.80%